// Copyright (C) 2014-20xx CEA/DEN, EDF R&D

// File:    SketchSolver_Manager.h
// Created: 08 May 2014
// Author:  Artem ZHIDKOV

#ifndef SketchSolver_Manager_H_
#define SketchSolver_Manager_H_

#include "SketchSolver.h"
#include <SketchSolver_Group.h>
#include <SketchSolver_Builder.h>

#include <Events_Listener.h>
#include <SketchPlugin_Constraint.h>

#include <list>
#include <set>

/** \class   SketchSolver_Manager
 *  \ingroup Plugins
 *  \brief   Listens the changes of SketchPlugin features and transforms the Constraint
 *           feature into the format understandable by sketch solver.
 *
 *  \remark This is a singleton.
 */
class SketchSolver_Manager : public Events_Listener
{
public:
  /** \brief Main method to create constraint manager
   *  \return pointer to the singleton
   */
  static SketchSolver_Manager* instance();

  /** \brief Implementation of Event Listener method
   *  \param[in] theMessage the data of the event
   */
  virtual void processEvent(const std::shared_ptr<Events_Message>& theMessage);

  /**
   * The solver needs all the updated objects are transfered in one group, not one by one.
   * This iscreases performance and avoids problems in resolve of only part of the made updates.
   */
  virtual bool groupMessages();

  /// \brief Initialize builder for solver's data structure entities
  /// \param theBuilder [in]  solver's specific builder
  void setBuilder(BuilderPtr theBuilder);
  /// \brief Returns the builder specific for the solver
  BuilderPtr builder();

protected:
  SketchSolver_Manager();
  ~SketchSolver_Manager();

  /** \brief Adds or updates a constraint or an entity in the suitable group
   *  \param[in] theFeature sketch feature to be changed
   *  \param[in] theMoved   \c true if the feature has been moved in the viewer
   *  \return \c true if the feature changed successfully
   */
  bool updateFeature(std::shared_ptr<SketchPlugin_Feature> theFeature, bool theMoved = false);

  /** \brief Removes a constraint from the manager
   *  \param[in] theConstraint constraint to be removed
   *  \return \c true if the constraint removed successfully
   */
  bool removeConstraint(std::shared_ptr<SketchPlugin_Constraint> theConstraint);

  /** \brief Goes through the list of groups and solve the constraints
   *  \return \c true, if groups are resolved, and features should be updated 
   *  (send the Update event)
   */
  bool resolveConstraints();

private:
  /** \brief Searches group which interact with specified feature
   *  \param[in]  theFeature  object to be found
   *  \return Pointer to corresponding group or NULL if the group cannot be created.
   */
  SketchGroupPtr findGroup(std::shared_ptr<SketchPlugin_Feature> theFeature);

  /// \brief Stop sending the Update event until all features updated
  /// \return \c true, if the last flushed event is Update
  bool stopSendUpdate() const;
  /// \brief Allow to send the Update event
  void allowSendUpdate() const;

private:
  std::list<SketchGroupPtr>   myGroups;  ///< Groups of constraints
  BuilderPtr                  myBuilder; ///< Builder for solver's entities
  /// true if computation is performed and all "updates" are generated by this algo
  /// and needs no recomputation
  bool myIsComputed;
};

#endif
