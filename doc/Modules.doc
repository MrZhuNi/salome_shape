// Special file to define and describe the modules (goups)

/**
 * \defgroup DataModel Data model
 *
 * \brief Structures for storage and management the application data.
 * 
 * Data structures are unified and splitted in universal <b>ModelAPI</b> package.
 * The OCCT specialized implementation of ModelAPI interfaces is located in the <b>Model</b>.
 * The geometrical primitives interfaces in <b>GeomAPI</b> package are supported by geometrical 
 * persistence elements in <b>GeomDatAPI</b> interface and has OCCT-specific implementation in GeomData package.
 *
 */

/**
 * \defgroup DataAlgo Algorithms
 *
 * \brief Different algorithm used in the application
 * 
 * The geometrical algorithms implementation (basing on OCCT libraries) are located in <b>GeomAlgoAPI</b>.
 *
 */

/**
 * \defgroup Plugins Plugins
 *
 * \brief Implementation of specific features of the application is concentrated in plugins.
 * 
 * The C++ and Python features implementations are located in plugins: specially organized libraries
 * and configuration files that allows to define the user interface and specific algorithms.
 * There are many plugins that should be extended with the development of the application. The names
 * of plugin-packages are ended with "Plugin" string:
 * <b>PartSetPlugin</b>, <b>ConstructionPlugin</b>, <b>SketchPlugin</b>, <b>FeaturesPlugins</b>, etc.
 *
 */

/**
 * \defgroup GUI GUI of the application
 *
 * \brief Classes for griphic user interface definition
 * 
 * Classes of application windows definition, operations launching, 
 * and objects presentations. It consists of two packages:
 * - ModuleBase - level for modules definition
 * - XGUI - implementation of Application GUI.
 */

/**
 * \defgroup Salome A Salome connector
 * 
 * \brief A set of classes which provide wrapping of 
 * OpenParts application as SALOME module
 */

/** 
 * \defgroup Desktop Classes for standalone application
 * 
 * \brief This group contains classes for launching the application 
 * in standalone desktop (without SALOME)
 */

/** 
 * \defgroup Modules Modules
 * 
 * \brief Definition of a module as a set of classes for plugins management
 */

/**
 * \defgroup Validators Validators
 *
 * \brief Implementation of internal logic of the feature
 * 
 * Validators are used for checking validity of the feature: each argument, 
 * dependencies between the arguments. Validators are defined in the 
 * configuration files and may be also used for selection filters (ModuleBase_SelectionValidator),
 * passing configurable parameters from XML file to the feature implementation 
 * (like in ExchangePlugin_ImportFormatValidator).
 *
 */

